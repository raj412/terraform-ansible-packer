#
# role netbox-build
# tasks file
#

####################
# Setup the system #
####################

- name: Gather ec2 facts
  ec2_metadata_facts:

- name: Get Instance info
  ec2_instance_info:
    instance_ids:
    - "{{ansible_ec2_instance_id}}"
  register: instance_info

- name: Environment TAG is
  debug:
    msg: "{{instance_info.instances[0].tags.Environment}}"

# Create the netbox user
- name: Create the netbox user
  user:
    name: netbox

# Create the opt mount point
- name: Create netbox mount point
  file:
    path: /opt/netbox
    state: directory
    mode: 0755
    group: netbox
    owner: netbox

# create the opt volume
- name: Create the netbox lv
  lvol:
    vg: vg_data
    lv: lv_opt_netbox
    size: 10G

- name: format lv_opt_netbox as XFS
  filesystem:
    fstype: xfs
    dev: /dev/vg_data/lv_opt_netbox


- name: Update fstab with the new mount point
  lineinfile:
    path: /etc/fstab
    regexp: '^/dev/vg_data/lv_opt_netbox  /opt/netbox'
    line: '/dev/vg_data/lv_opt_netbox /opt/netbox xfs defaults 0 0'

- name: Mount the new LV
  mount:
    path: /opt/netbox
    src: /dev/vg_data/lv_opt_netbox
    fstype: xfs
    state: mounted

- name: Set system kernel settings
  sysctl:
    name:  "{{item.name}}"
    value: "{{item.value}}"
    sysctl_set: yes
    state: present
    reload: yes
  loop:
    - { name: 'vm.swappiness' , value: 0 }


- name: Install packages for netbox
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - postgresql
      - postgresql-common
      - postgresql-contrib
      - libpq-dev
      - redis-server
      - nginx
      - libldap2-dev
      - libsasl2-dev
      - libssl-dev
      - python3
      - python3-pip
      - python3-venv
      - python3-dev
      - python3-boto3
      - python3-botocore
      - build-essential
      - libxml2-dev
      - libxslt1-dev
      - libffi-dev
      - libpq-dev
      - libssl-dev
      - zlib1g-dev
      - xmlsec1

- name: Install ansible pre-requisite
  pip:
    name: "{{item}}"
  loop:
    - psycopg2-binary
    - django3-auth-saml2 

- name: Upgrade pip3
  pip:
    name: pip
    extra_args: --upgrade
    executable: pip3

##################################
# Install and configure Postgres #
##################################

- name: Enable and start postgresql
  service:
    name: postgresql@12-main.service
    state: started
    enabled: yes

- name: Wait for port Postgress
  wait_for:
    port: 5432
    delay: 60

- name: Create postgresql database netbox
  become: true
  become_user: postgres
  postgresql_db:
    name: netbox

- name: Create postgresql netbox user
  become: true
  become_user: postgres
  postgresql_user:
    db: netbox
    name: netbox
    priv: ALL
    #password: "{{(lookup('aws_secret', 'prod/netbox/postgres')|from_json)['password']}}"
    password: "{{lookup('aws_secret', (instance_info.instances[0].tags.Environment|lower) + '/netbox/postgres')}}"

- name: Grant privs to netbox
  become: true
  become_user: postgres
  postgresql_privs:
    db: postgres
    privs: ALL
    type: database
    obj: netbox
    role: netbox



##################
# Install netbox #
##################

- name: Create deploy directory
  file:
    path: /opt/netbox/deploy
    state: directory
    owner: netbox
    group: netbox
    mode: '0755'

- name: Get the netbox install file
  aws_s3:
    bucket: litfibre-infra
    object: /netbox/netbox-v{{netbox_version}}.tgz
    dest: /opt/netbox/deploy/netbox.tgz
    mode: get

- name: Untar the netbox install
  become: true
  become_user: netbox
  unarchive:
    src: /opt/netbox/deploy/netbox.tgz
    dest: /opt/netbox/deploy
    remote_src: yes
  

- name: Check if current symbolic link exists
  command: test -d /opt/netbox/current
  register: result
  ignore_errors: true

- name: Setup the current symbolic link
  shell:  cd /opt/netbox/deploy;dn=`ls -td netbox-* |head -1`;cd /opt/netbox;ln -sf /opt/netbox/deploy/$dn/netbox /opt/netbox/current
  when: result is failed

- name: Check if deploy symbolic link exists
  command: test -d /opt/netbox/deploy/current
  register: result
  ignore_errors: true

- name: Setup the deploy symbolic link
  shell:  cd /opt/netbox/deploy;dn=`ls -td netbox-* |head -1`;cd /opt/netbox;ln -sf /opt/netbox/deploy/$dn /opt/netbox/deploy/current
  when: result is failed

- name: Copy in the netbox config template
  template:
    src: configuration.py.j2
    dest: /opt/netbox/deploy/current/netbox/netbox/configuration.py
    owner: netbox
    group: netbox
    mode: 0644
  vars:
    postgresPass: "{{lookup('aws_secret', (instance_info.instances[0].tags.Environment|lower) + '/netbox/postgres')}}"
    Environment:  "{{instance_info.instances[0].tags.Environment|lower}}"

- name: Copy in the netbox saml2 template
  template:
    src: saml.xml.j2
    dest: /opt/netbox/deploy/current/netbox/netbox/saml2.xml
    owner: netbox
    group: netbox
    mode: 0640
  vars:
    saml_cert: "{{lookup('aws_secret', (instance_info.instances[0].tags.Environment|lower) + '/saml2/x509')}}"

- name: Copy in the netbox ldap.config template
  template:
    src: ldap_config.py.j2
    dest: /opt/netbox/deploy/current/netbox/netbox/ldap_config.py
    owner: netbox
    group: netbox
    mode: 0640
  vars:
    adpassword: "{{(lookup('aws_secret', 'vpn/ad/domainjoin')|from_json)['password']}}"

- name: Bless /opt/netbox
  file:
    dest: /opt/netbox
    owner: netbox
    group: netbox
    recurse: yes

- name: Copy in default gunicorn config
  copy:
    src: /opt/netbox/deploy/current/contrib/gunicorn.py
    dest: /opt/netbox/current/gunicorn.py
    remote_src: yes

# - name: Add in netbox plugin to the requirements.txt file
#   lineinfile:
#     path: /opt/netbox/deploy/current/requirements.txt
#     regexp: '^netbox-plugin-auth-saml2'
#     line: netbox-plugin-auth-saml2==2.3.0

# - name: Add in django saml library for the netbox saml plugin
#   lineinfile:
#     path: /opt/netbox/deploy/current/requirements.txt
#     regexp: '^django3_auth_saml2'
#     line: django3_auth_saml2==0.5.0

- name: Add in BGP package name for netbox plugin
  lineinfile:
    path: /opt/netbox/deploy/current/requirements.txt
    regexp: '^netbox-bgp'
    line: netbox-bgp==0.8.1

#LDAP auth package
- name: Add in LDAP package name for authentication
  lineinfile:
    path: /opt/netbox/deploy/current/requirements.txt
    regexp: '^django-auth-ldap'
    line: django-auth-ldap==4.1.0

- name: Add in ipcalculator package name for netbox plugin
  lineinfile:
    path: /opt/netbox/deploy/current/requirements.txt
    regexp: '^netbox-ipcalculator'
    line: netbox-ipcalculator==1.1

- name: Add in ipcalculator package name for netbox plugin
  lineinfile:
    path: /opt/netbox/deploy/current/requirements.txt
    regexp: '^netbox-ipcalculator'
    line: netbox-ipcalculator==1.1

- name: Add in netbox topology views package name for netbox plugin
  lineinfile:
    path: /opt/netbox/deploy/current/requirements.txt
    regexp: '^netbox-topology-views'
    line: netbox-topology-views==3.0.1

- name: Add in netbox ui package name for netbox plugin
  lineinfile:
    path: /opt/netbox/deploy/current/requirements.txt
    regexp: '^nextbox-ui-plugin'
    line: nextbox-ui-plugin==0.9.2

- name: Update PyYAML. it's not installing during Upgrade process
  pip:
    name: PyYAML
    extra_args: --ignore-installed

- name: Run the install
  shell:
    cmd: ./upgrade.sh
    chdir: /opt/netbox/deploy/current/


- name: Copy the systemd netbox.service file
  copy:
    src: netbox.service
    dest: /usr/lib/systemd/system/netbox.service
  

- name: Copy the systemd netbox-rq.service file
  copy:
    src: netbox-rq.service
    dest: /usr/lib/systemd/system/netbox-rq.service

- name: Start/Reload the netbox service
  service:
    name: netbox.service
    state: restarted
    enabled: yes

- name: Start/Reload the netbox-rq service
  service:
    name: netbox-rq.service
    state: restarted
    enabled: yes

# Create selfsigned keys
- name: Ensure directory exists for local self-signed TLS certs.
  file:
    path: /etc/ssl/certs
    state: directory

- name: Generate an OpenSSL private key.
  openssl_privatekey:
    path: /etc/ssl/private/netbox.key

- name: Generate an OpenSSL CSR.
  openssl_csr:
    path: /etc/ssl/private/netbox.csr
    privatekey_path: /etc/ssl/private/netbox.key
    common_name: "*.priv.litfibre.com"

- name: Generate a Self Signed OpenSSL certificate.
  openssl_certificate:
    path: /etc/ssl/certs/netbox.crt
    privatekey_path: /etc/ssl/private/netbox.key
    csr_path: /etc/ssl/private/netbox.csr
    provider: selfsigned

- name: Copy nginx config
  copy:
    src: netbox.nginx
    dest: /etc/nginx/sites-available/netbox

- name: Configure the nginx config
  shell:
    cmd: ln -sf /etc/nginx/sites-available/netbox /etc/nginx/sites-enabled/netbox
    chdir: /etc/nginx/sites-enabled

- name: Get the status of the default file
  stat:
    path: /etc/nginx/sites-enabled/default
  register: default_file

- name: Delete the default config
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  when: default_file.stat.exists

- name: Start/Reload the nginx service
  service:
    name: nginx.service
    state: restarted

####################
# Setup the backup #
####################

- name: Create management directory
  file:
    path: /opt/management/bin
    state: directory
    mode: '0750'
    recurse: yes

- name: Copy in backup script
  copy:
    src: netbox-backup.py
    dest: /opt/management/bin/netbox-backup.py
    owner: root
    group: root
    mode: 0700

- name: Copy in restore script
  copy:
    src: netbox-restore.py
    dest: /opt/management/bin/netbox-restore.py
    owner: root
    group: root
    mode: 0700
    
    
#============================ LDAP =========================

# #LDAP config
# LDAP Configuration
# This guide explains how to implement LDAP authentication using an external server. User authentication will fall back to built-in Django users in the event of a failure.

# Install Requirements
# Install System Packages
# On Ubuntu:


  # Install django-auth-ldap
# Activate the Python virtual environment and install the django-auth-ldap package using pip:

# source /opt/netbox/venv/bin/activate
# pip3 install django-auth-ldap
# Once installed, add the package to local_requirements.txt to ensure it is re-installed during future rebuilds of the virtual environment:


# sudo sh -c "echo 'django-auth-ldap' >> /opt/netbox/local_requirements.txt"
# Configuration
# First, enable the LDAP authentication backend in configuration.py. (Be sure to overwrite this definition if it is already set to RemoteUserBackend.)


# REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'
# Next, create a file in the same directory as configuration.py (typically /opt/netbox/netbox/netbox/) named ldap_config.py. Define all of the parameters required below in ldap_config.py. Complete documentation of all django-auth-ldap configuration options is included in the project's official documentation.

# General Server Configuration
# Info

# When using Windows Server 2012 you may need to specify a port on AUTH_LDAP_SERVER_URI. Use 3269 for secure, or 3268 for non-secure.


# import ldap

# # Server URI
# AUTH_LDAP_SERVER_URI = "ldaps://ad.example.com"

# # The following may be needed if you are binding to Active Directory.
# AUTH_LDAP_CONNECTION_OPTIONS = {
#     ldap.OPT_REFERRALS: 0
# }

# # Set the DN and password for the NetBox service account.
# AUTH_LDAP_BIND_DN = "CN=NETBOXSA, OU=Service Accounts,DC=example,DC=com"
# AUTH_LDAP_BIND_PASSWORD = "demo"

# # Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.
# # Note that this is a NetBox-specific setting which sets:
# #     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
# LDAP_IGNORE_CERT_ERRORS = True
# STARTTLS can be configured by setting AUTH_LDAP_START_TLS = True and using the ldap:// URI scheme.

# User Authentication
# Info

# When using Windows Server 2012, AUTH_LDAP_USER_DN_TEMPLATE should be set to None.


# from django_auth_ldap.config import LDAPSearch

# # This search matches users with the sAMAccountName equal to the provided username. This is required if the user's
# # username is not in their DN (Active Directory).
# AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=Users,dc=example,dc=com",
#                                     ldap.SCOPE_SUBTREE,
#                                     "(sAMAccountName=%(user)s)")

# # If a user's DN is producible from their username, we don't need to search.
# AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=example,dc=com"

# # You can map user attributes to Django attributes as so.
# AUTH_LDAP_USER_ATTR_MAP = {
#     "first_name": "givenName",
#     "last_name": "sn",
#     "email": "mail"
# }
# User Groups for Permissions
# Info

# When using Microsoft Active Directory, support for nested groups can be activated by using NestedGroupOfNamesType() instead of GroupOfNamesType() for AUTH_LDAP_GROUP_TYPE. You will also need to modify the import line to use NestedGroupOfNamesType instead of GroupOfNamesType .


# from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# # This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group
# # hierarchy.
# AUTH_LDAP_GROUP_SEARCH = LDAPSearch("dc=example,dc=com", ldap.SCOPE_SUBTREE,
#                                     "(objectClass=group)")
# AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# # Define a group required to login.
# AUTH_LDAP_REQUIRE_GROUP = "CN=NETBOX_USERS,DC=example,DC=com"

# # Mirror LDAP group assignments.
# AUTH_LDAP_MIRROR_GROUPS = True

# # Define special user types using groups. Exercise great caution when assigning superuser status.
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#     "is_active": "cn=active,ou=groups,dc=example,dc=com",
#     "is_staff": "cn=staff,ou=groups,dc=example,dc=com",
#     "is_superuser": "cn=superuser,ou=groups,dc=example,dc=com"
# }

# # For more granular permissions, we can map LDAP groups to Django groups.
# AUTH_LDAP_FIND_GROUP_PERMS = True

# # Cache groups for one hour to reduce LDAP traffic
# AUTH_LDAP_CACHE_TIMEOUT = 3600
# is_active - All users must be mapped to at least this group to enable authentication. Without this, users cannot log in.
# is_staff - Users mapped to this group are enabled for access to the administration tools; this is the equivalent of checking the "staff status" box on a manually created user. This doesn't grant any specific permissions.
# is_superuser - Users mapped to this group will be granted superuser status. Superusers are implicitly granted all permissions.
# Warning

# Authentication will fail if the groups (the distinguished names) do not exist in the LDAP directory.

# Troubleshooting LDAP
# systemctl restart netbox restarts the NetBox service, and initiates any changes made to ldap_config.py. If there are syntax errors present, the NetBox process will notspawn an instance, and errors should be logged to /var/log/messages.

# For troubleshooting LDAP user/group queries, add or merge the following logging configuration to configuration.py:


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'netbox_auth_log': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': '/opt/netbox/logs/django-ldap-debug.log',
#             'maxBytes': 1024 * 500,
#             'backupCount': 5,
#         },
#     },
#     'loggers': {
#         'django_auth_ldap': {
#             'handlers': ['netbox_auth_log'],
#             'level': 'DEBUG',
#         },
#     },
# }
# Ensure the file and path specified in logfile exist and are writable and executable by the application service account. Restart the netbox service and attempt to log into the site to trigger log entries to this file.
